<?php
/**
 * MentionMe
 * Copyright ï¿½ 2013 Wildcard
 * http://www.rantcentralforums.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses
 */

// disallow direct access to this file for security reasons.
if(!defined('IN_MYBB'))
{
    die('Direct initialization of this file is not allowed.<br /><br />Please make sure IN_MYBB is defined.');
}

// checked by other plugin files
define("IN_MENTIONME", true);

// load install routines only if in ACP
if(defined("IN_ADMINCP"))
{
	require_once MYBB_ROOT . "inc/plugins/MentionMe/mention_install.php";
}

// make sure we have access to ACP settings in the main script
global $settings;

// load the alerts functions only if MyAlerts and mention alerts are enabled
if($settings['myalerts_enabled'] && $settings['myalerts_alert_mention'])
{
	require_once MYBB_ROOT . 'inc/plugins/MentionMe/mention_alerts.php';
}

// main hook
$plugins->add_hook("parse_message", "mention_run");

/*
 * mention_run()
 *
 * use a regex to either match a double-quoted mention (@"user name") or just grab the @ symbol and everything after it that is qualifies as a word and is within name length
 *
 * @param - $message is the contents of the post
 */
function mention_run($message)
{
	global $mybb;

	// use function Mention__filter to repeatedly process mentions in the current post
	return preg_replace_callback('/@"([^<]+?)"|@\'([^<]+?)\'|@([\w .]{' . (int) $mybb->settings['minnamelength'] . ',' . (int) $mybb->settings['maxnamelength'] . '})/', "Mention__filter", $message);
}

/*
 * Mention__filter()
 *
 * matches any mentions of existing user in the post
 *
 * advanced search routines rely on $mybb->settings['mention_advanced_matching'], if set to true mention will match user names with spaces in them without necessitating the use of double quotes.
 *
 * @param - $match is an array generated by preg_replace_callback()
 */
function Mention__filter(array $match)
{
	global $db, $mybb, $settings, $cache;
	static $name_cache;
	$name_parts = array();
	$shift_count = 0;

	$cache_changed = false;

	// cache names to reduce queries
	if(!isset($name_cache) || empty($name_cache))
	{
		$wildcard_plugins = $cache->read('wildcard_plugins');
		$name_cache = $wildcard_plugins['mentionme']['namecache'];
	}

	// save the original name
	$orig_name = $match[0];

	// if the name is already in the cache . . . (the @ is still on the text so test the rest of the string)
	if(isset($name_cache[strtolower(substr($orig_name, 1))]))
	{
		// . . . simply return it and save the query
		return $name_cache[strtolower(substr($orig_name, 1))];
	}

	// if the user entered the mention in quotes then it will be returned in $match[1],
	// if not it will be returned in $match[2]
	array_shift($match);
	while(strlen(trim($match[0])) == 0 && !empty($match))
	{
		array_shift($match);
		++$shift_count;
	}

	if(empty($match) || strlen(trim($match[0])) == 0)
	{
		return orig_name;
	}

	// if the name is already in the cache . . .
	if(isset($name_cache[strtolower($match[0])]))
	{
		// . . . simply return it and save the query
		return $name_cache[strtolower($match[0])];
	}

	// if the array was shifted then no quotes were used
	if($shift_count)
	{
		// padding is only needed for the @
		$shift_pad = 1;

		// split the string into an array of words
		$name_parts = explode(' ', $match[0]);

		// add the first part
		$username_lower = $name_parts[0];

		// if the name part we have is shorter than the minimum username length (set in ACP) we need to loop through all the name parts and keep adding them until we at least reach the minimum length
		while(strlen($username_lower) < $mybb->settings['minnamelength'] && !empty($name_parts))
		{
			// discard the first part (we have it stored)
			array_shift($name_parts);

			// if there is another part
			if(strlen($name_parts[0]) > 0)
			{
				// add it
				$username_lower .= ' ' . $name_parts[0];
			}
			else
			{
				// no more parts?
				break;
			}
		}
	}
	else
	{
		// @ and two double quotes
		$shift_pad = 3;

		// grab the entire match
		$username_lower = $match[0];
	}

	// generate a lowercase and db-friendly username to search with
	$username_lower = my_strtolower(html_entity_decode(trim($username_lower)));

	// if the name is already in the cache . . .
	if(isset($name_cache[$username_lower]))
	{
		// . . . simply return it and save the query
		//  restore any surrounding characters from the original match
		return $name_cache[$username_lower] . substr($orig_name, strlen($username_lower) + $shift_pad);
	}
	else
	{
		// lookup the username
		$user = mention_try_name($username_lower);

		// if the username exists . . .
		if($user['uid'] != 0)
		{
			$cache_changed = true;

			// preserve any surrounding chars
			$left_over = substr($orig_name, strlen($user['username']) + $shift_pad);
		}
		else
		{
			// if no match and advanced matching is enabled . . .
			if($settings['mention_advanced_matching'])
			{
				// we've already checked the first part, discard it
				array_shift($name_parts);

				// if there are more parts and quotes weren't used
				if(!empty($name_parts) && $shift_pad != 3 && strlen($name_parts[0]) > 0)
				{
					// start with the first part . . .
					$try_this = $username_lower;

					$all_good = false;

					// . . . loop through each part and try them in serial
					foreach($name_parts as $val)
					{
						// add the next part
						$try_this .= ' ' . $val;

						// check the cache for a match to save a query
						if(isset($name_cache[$try_this]))
						{
							// preserve any surrounding chars from the original match
							$left_over = substr($orig_name, strlen($try_this) + $shift_pad);
							return $name_cache[$try_this] . $left_over;
						}

						// check the db
						$user = mention_try_name($try_this);

						// if there is a match . . .
						if($user['uid'] != 0)
						{
							// cache the username HTML
							$username_lower = strtolower($user['username']);

							// preserve any surrounding chars from the original match
							$left_over = substr($orig_name, strlen($user['username']) + $shift_pad);

							// and gtfo
							$all_good = true;
							$cache_changed = true;
							break;
						}
					}

					if(!$all_good)
					{
						// still no matches?
						return $orig_name;
					}
				}
				else
				{
					// nothing else to try
					return $orig_name;
				}
			}
			else
			{
				// advanced matching is disabled
				return $orig_name;
			}
		}

		// set up the username link so that it displays correctly for the display group of the user
		$username = htmlspecialchars_uni($user['username']);
		$usergroup = $user['usergroup'];
		$uid = $user['uid'];
		$displaygroup = $user['displaygroup'];
		$username = format_name($username, $usergroup, $displaygroup);
		$link = get_profile_link($user['uid']);

		// build the mention
		// the HTML id property is used to store the uid of the mentioned user for MyAlerts (if installed)
		$name_cache[$username_lower] = "@<a id=\"mention_{$uid}\" href=\"{$link}\">{$username}</a>";

		// if we had to query for this user's info then update the cache
		if($cache_changed)
		{
			$wildcard_plugins = $cache->read('wildcard_plugins');
			$wildcard_plugins['mentionme']['namecache'] = $name_cache;
			$cache->update('wildcard_plugins', $wildcard_plugins);
		}

		// and return the mention
		return $name_cache[$username_lower] . $left_over;
	}
}

/*
 * mention_try_name()
 *
 * searches the db for a user by name
 *
 * return an array containing uid, username, usergroup and displaygroup upon success
 * return false on failure
 *
 * @param - $username is a string containing the username to try
 */
function mention_try_name($username = '')
{
	global $db;

	// create another name cache here to save queries if names with spaces are used more than once in the same post.
	static $name_list;

	if(!is_array($name_list))
	{
		$name_list = array();
	}

	$username = strtolower($username);

	if($username)
	{
		// if the name is in this cache (has been searched for before)
		if($name_list[$username])
		{
			// . . . just return the data and save the query
			return $name_list[$username];
		}

		// query the db
		$user_query = $db->simple_select("users", "uid, username, usergroup, displaygroup", "LOWER(username)='" . $db->escape_string($username) . "'", array('limit' => 1));

		// result?
		if($db->num_rows($user_query) === 1)
		{
			// fetch the user info
			$return_array = $db->fetch_array($user_query);

			// cache the name
			$name_list[$username] = $return_array;

			// and return it
			return $return_array;
		}
		else
		{
			// no matches
			return false;
		}
	}
	// no username supplied
	return false;
}

?>
